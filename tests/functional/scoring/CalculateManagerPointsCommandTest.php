<?php namespace FormulaFantasy\Tests\Functional;

require_once __DIR__ . '/../../unit/TestHelper.php';

use FormulaFantasy\Client\Invoker;
use FormulaFantasy\Database\DatabasePlain;
use FormulaFantasy\Draft\Roster;
use FormulaFantasy\Score\CalculateManagerPointsCommand;
use FormulaFantasy\Score\Score;
use PHPUnit\Framework\TestCase;

class CalculateManagerPointsCommandTest extends TestCase
{
    protected $db;
    protected $invokerObject;

    /**
     * @test
     * @dataProvider RaceFinishProvider
     */
    public function testFullScoringWithCommand_WithTreyRoundOne_ReturnSixtyOne($tmId,$raceId, $expected)
    {
        //--*arrange*--
        //figure out Trey Roster...do look up on draft table
        $rosObj = new Roster($this->db);
        //need to get draftlist (Roster)
        $rosArray = $rosObj->GetRosterByOwner($tmId, $raceId);
        //--*assert*--
        //--*act*--



        //______________________________________________________________
        //make sure all drivers from tested roster with be calculated
        $scoreObj = new Score($this->db);

        //$calcCommand = new calculatePointsCommand($scoreObj, $rosArray);
        $calcManObj = new CalculateManagerPointsCommand($scoreObj, $rosArray);

        $this->invokerObject->setCommandOne($calcManObj);
        //run through scoring command
        $this->invokerObject->run();
        //get answer
        $this->assertEquals($expected, $calcManObj->ans);

    }

    public function RaceFinishProvider()
    {
        return [
            [3,1031, (11+20)],
            [6,1031, (31+20)],
            [1,1031, (4+20)]
        ];
    }

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->db = new DatabasePlain();
        $this->invokerObject = new Invoker();
    }

    public function test__construct()
    {

    }

    public function testExecute()
    {

    }
}
